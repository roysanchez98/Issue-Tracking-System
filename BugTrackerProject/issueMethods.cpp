#include <iostream>
#include <random>
#include <fstream>
#include <map>
#include "issueMethods.h"

using namespace std;

//Global Variables
map <int ,Issue> issueMap;
ofstream file;

/*------Alexa's random Code-------*/
int randomID(){
        return (rand() % 899999) + 100000;
}

/*---Tim's code---*/
//writing to file
void createIssue() {
    //temp values
    string name;
    //ID will be generated by another function
    string desc;
    string priority;
    string status;

    //ask user to enter bug info
    cout << "Enter a name for the bug: ";
    getline(cin, name);
    cout << "Enter a description: ";
    getline(cin, desc);
    cout << "Enter a priority: ";
    getline(cin, priority);
    cout << "Enter a status: ";
    getline(cin, status);

    //random ID assigned
    int ID = randomID();
    //creating map here
    createIssueMap(ID, name, desc, status, priority);

    //write to file
    file << name << ",";       //Name
    file << ID << ",";         //ID
    file << desc << ",";       //Description
    file << priority << ",";   //Priority
    file << status << "\n";     //Completion status
}

void createIssuesFile(){
    //creating file
    file.open("buglist1.csv");

    file << "NAME,"; //Name
    file << "ID #,"; //ID
    file << "DESCRIPTION,"; //Description
    file << "PRIORITY,"; //Priority
    file << "STATUS\n"; //Completion status
    string x;

    //FOR TESTING
    while(x != "no"){
    createIssue();
    cout << "Keep adding issues? yes/no" << endl;
    getline(cin, x);
    }
    cout << endl;

    file.close();
}

/*---Jaime's Code---*/

void createIssueMap(int id, string name, string descrip, string status, string prio){

    //Identifies duplicates and re-rolls
    if(issueMap.count(id) > 0) {
        id = randomID();
    }

    issueMap.insert(pair<int, Issue>(id, *new Issue(id, name, descrip, status, prio)));
}

void displayAllIssues(){
    for(auto x : issueMap) {
    x.second.displayIssue();
    cout << endl;
    }
}
